/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * INTERNAL VARIABLES
 * HELPER FUNCTIONS
 * MIXINS
 */

/**
 * Credit: Typesettings.io
 */





/*------------------------------------*\
    $INTERNAL VARIABLES
\*------------------------------------*/

// Best not to adjust these.

// Converts the $base-font-size value to EMs
$base-em-font-size: ($base-font-size / 16px) * 1em !default;

// One step down in the modular scale in EMs
$ms-down1: $base-em-font-size / $ms-ratio;

// Two steps down in the modular scale in EMs
$ms-down2: $ms-down1 /$ms-ratio;

// Three steps down in the modular scale in EMs
$ms-down3: $ms-down2 / $ms-ratio;

// One step up in the modular scale in EMs
$ms-up1: $base-em-font-size * $ms-ratio;

// Two steps up in the modular scale in EMs
$ms-up2: $ms-up1 * $ms-ratio;

// Three steps up in the modular scale in EMs
$ms-up3: $ms-up2 * $ms-ratio;

// Four steps up in the modular scale in EMs
$ms-up4: $ms-up3 * $ms-ratio;

// Creates a unitless line-height that is based on typographic ideals and maintains vertical rhythm.
$base-line-height: ($base-vertical-unit * $base-line-multi) / $base-font-size;





/*------------------------------------*\
    $HELPER FUNCTIONS
\*------------------------------------*/

// Returns a number without a unit. For example 16px becomes 16
@function stripUnits($number){
    @return $number / ($number * 0 + 1);
}

// Returns an EM value. For example 24px becomes 1.5em
@function emCalc($target, $context: $base-font-size){
    @return stripUnits(($target / $context)) + 0em;
}

// Returns an EM value that is a multiple of our defined base vertical unit. For example 3 becomes 1.125em
@function emRhythm($lines: $base-vertical-unit, $font-size: $base-em-font-size){
    @return (stripUnits($lines) * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

// Returns a unitless number that is a multiple of our defined base vertical unit. For example 3 becomes 1.125
@function unitlessRhythm($lines: $base-vertical-unit, $font-size: $base-em-font-size){
    @return ($lines * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size));
}






/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

// Finally, the tools that you can use throughout your project to set
// all the wonderful type related stuffs.

// Sets the type in EMs and makes a vertical rhythm unitless line-height that is based on context.
@mixin setType($lines: $base-line-multi, $font-size: $base-em-font-size){
    font-size: $font-size;
    line-height: unitlessRhythm($lines, $font-size);
}

// Creates a vertical rhythm unitless line-height that is based on context
@mixin setLeading($lines: $base-line-multi, $font-size: $base-em-font-size){
    line-height: unitlessRhythm($lines, $font-size);
}

@mixin rhythmBorderTop($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size){
    border-top-width: $border-width;
    padding-top: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

@mixin rhythmBorderBottom($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size){
    border-bottom-width: $border-width;
    padding-bottom: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

@mixin rhythmBorder($border-width: 1px, $lines: $base-line-multi, $font-size: $base-em-font-size){
    border-width: $border-width;
    padding: (($lines * stripUnits($base-vertical-unit)) - stripUnits($border-width)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}