/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 *  BACKGROUND IMAGES
 *  SIZING
 *  Z-INDEX
 *  POSITION MIXIN
 *      Examples
 *      Position Mixin
 *      Checking Function
 *      Shorthands
*/





/*------------------------------------*\
    !BACKGROUND IMAGES
\*------------------------------------*/

// Media Queries - Retina - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss & http://www.brettjankord.com/2012/11/28/cross-browser-retinahigh-resolution-media-queries/
@mixin image-2x($image, $width, $height){
    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi) {
        background-image: url('../images/#{$image}');
        background-size: $width $height;
    }
}





/*------------------------------------*\
    !SIZING
\*------------------------------------*/

@mixin sizing($width, $height){
    width: $width;
    height: $height;
}

@mixin square($size){
    width: $size;
    height: $size;
}





/*------------------------------------*\
    !Z-INDEX FUNCTION
\*------------------------------------*/

// A function helper to avoid having to type `map-get($z-layers, ...)`
// @param [string] $component (default): the layer to use
// @return [number] | null
@function z($layer: 'default'){
    @if map-has-key($z-layers, $layer) {
        @return map-get($z-layers, $layer);
    }

    @warn "No z-index found in $z-layers map for `#{$layer}`. Property omitted.";
    @return null;
}





/*------------------------------------*\
    !POSITION MIXIN
\*------------------------------------*/

/**
 * Helper mixin for offset positioning
 * Credit: http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/
 */

/**
 * ^Examples
 */
/**
.a {
    @include absolute();
}

.b {
    @include absolute(top);
}

.f {
    @include absolute(top right 1em);
}

.g {
    @include absolute(top 1em right);
}

.h {
    @include absolute(top 1em right 100%);
}

.j {
    @include absolute(top 1em right 1em bottom 1em left 1em)
}
*/

/**
 * ^Position Mixin
 */
@mixin position($position, $args: ()) {
    $offsets: top right bottom left;
    position: $position;

    @each $offset in $offsets {
        $index: index($args, $offset);

        @if $index {
            @if $index == length($args) {
                #{$offset}: 0;
            }
            @else {
                $next: nth($args, $index + 1);
                @if is-valid-length($next) {
                    #{$offset}: $next;
                }
                @else if index($offsets, $next) {
                    #{$offset}: 0;
                }
                @else {
                    @warn "Invalid value `#{$next}` for offset `#{$offset}`.";
                }
            }
        }
    }
}

/**
 * ^Checking Function
 */
@function is-valid-length($value) {
    @return (type-of($value) == "number" and not unitless($value))
       or (index(auto initial inherit 0, $value) != false);
}

/**
 * ^Shorthands
 */
@mixin absolute($args: ()) {
    @include position(absolute, $args);
}

@mixin fixed($args: ()) {
    @include position(fixed, $args);
}

@mixin relative($args: ()) {
    @include position(relative, $args);
}
