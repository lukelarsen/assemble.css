/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * BACKGROUND IMAGES
 * SIZING
 * RESPONSIVE
*/





/*------------------------------------*\
    $BACKGROUND IMAGES
\*------------------------------------*/

// Media Queries - Retina - http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss & http://www.brettjankord.com/2012/11/28/cross-browser-retinahigh-resolution-media-queries/
@mixin image-2x($image, $width, $height) {
    @media
    only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi) {
        background-image: url('../images/#{$image}');
        background-size: $width $height;
    }
}

// .svg w/ .png fallback for IE8
@mixin svg-background($file_name) {
    background-image: url('../images/#{$file_name}.png');
    background-image: none, url('../images/#{$file_name}.svg');
}





/*------------------------------------*\
    $SIZING
\*------------------------------------*/

@mixin sizing($width, $height) {
    width: $width;
    height: $height;
}

@mixin square($size) {
    width: $size;
    height: $size;
}





/*------------------------------------*\
    $RESPONSIVE
\*------------------------------------*/

/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
$palm-end:              $lap-start - 1px;
$lap-end:               $desk-start - 1px;

@mixin media-query($media-query){

    @if $media-query == palm{
        @media only screen and (max-width:$palm-end) { @content; }
    }

    @if $media-query == lap{
        @media only screen and (min-width:$lap-start) and (max-width:$lap-end) { @content; }
    }

    @if $media-query == lap-and-up{
        @media only screen and (min-width:$lap-start) { @content; }
    }

    @if $media-query == portable{
        @media only screen and (max-width:$lap-end) { @content; }
    }

    @if $media-query == desk{
        @media only screen and (min-width:$desk-start) { @content; }
    }

    @if $media-query == wide{
        @media only screen and (min-width: $wide-start) { @content; }
    }

}