@charset "UTF-8";
/**
 * General
 */
/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * RESPONSIVENESS
 * COLORS
*/
/*------------------------------------*\
    $RESPONSIVENESS
\*------------------------------------*/
/**
 * Set where breakpoints start.
 */
/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * BACKGROUND IMAGES
 * SIZING
 * RESPONSIVE
*/
/*------------------------------------*\
    $BACKGROUND IMAGES
\*------------------------------------*/
/*------------------------------------*\
    $SIZING
\*------------------------------------*/
/*------------------------------------*\
    $RESPONSIVE
\*------------------------------------*/
/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 *
 * We define some broad breakpoints in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * palm
 * lap
 * portable
 * desk
 * desk-wide
 *
 * Not using a media query will, naturally, serve styles to all devices.
 *
 * `@include media-query(palm){ [styles here] }`
 *
 * We work out your end points for you:
 */
/**
 * UI
 */
/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * IMPORTS
*/
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * RESET
*/
/*------------------------------------*\
    $RESET
\*------------------------------------*/
/**
 * A more considered reset; more of a restart...
 * As per: csswizardry.com/2011/10/reset-restarted
 */
/**
* Let’s make the box model all nice, shall we...?
*/
*, *:before, *:after {
  box-sizing: border-box;
}

/**
 * The usual...
 */
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
table, th, td, caption,
hr, body {
  margin: 0;
  padding: 0;
}

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title], dfn[title] {
  cursor: help;
}

/**
 * Remove underlines from potentially troublesome elements.
 */
u, ins {
  text-decoration: none;
}

/**
 * Apply faux underline via `border-bottom`.
 */
ins {
  border-bottom: 1px solid;
}

/**
 * So that `alt` text is visually offset if images don’t load.
 */
img {
  font-style: italic;
}

/**
 * Give form elements some cursor interactions...
 */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer;
}

.text-input:active,
.text-input:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none;
}

/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * NORMALIZE.CSS
*/
/*------------------------------------*\
    $NORMALIZE.CSS
\*------------------------------------*/
/*! normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/*
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
}

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */
}

/*
 * Remove default margin.
 */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/*
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/*
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}

/*
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap;
}

/*
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}

/*
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/*
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/*
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box;
}

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * IMPORTS
 * GRIDS
*/
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * GRID DEFAULT
 * FLEX CELLS MODIFIER
 * GROUP WIDTH MODIFIERS
 * SINGLE WIDTH MODIFIERS
 * GUTTER MODIFIERS
 * GROUP ALIGNMENT MODIFIERS
 * SINGLE ALIGNMENT MODIFIERS
*/
/*------------------------------------*\
    GRID DEFAULT
\*------------------------------------*/
.g-main, .g-reminders, .form-thirds, .form-quarters {
  display: flex;
  flex-wrap: wrap;
  list-style: none;
  margin: 0;
  padding: 0;
}

.gc-content, .gc-reminder, .form-thirds > li, .form-quarters > li {
  flex: 1;
}

/*------------------------------------*\ 
    $FLEX CELLS MODIFIER
\*------------------------------------*/
/**

/**
 * This will make all cells the same height.
 *
 * Apply with %grid.
 */
/*------------------------------------*\ 
    $GROUP WIDTH MODIFIERS
\*------------------------------------*/
/**
 * If we need to set a specific width to all
 * cells in a grid use these classes
 *
 * Extend them along with %grid.
 */
.g-reminders > div[class^='gc-'] {
  flex: 0 0 50%;
}

/*------------------------------------*\ 
    $SINGLE WIDTH MODIFIERS
\*------------------------------------*/
/**
 * We can set individual cell width with
 * these classes.
 *
 * Apply them with the %grid__item class.
 */
.gc-reminder--wide {
  width: 100%;
  flex: none !important;
}

.gc-reminders {
  width: 33.3333%;
  flex: none !important;
}

/*------------------------------------*\ 
    $GUTTER MODIFIERS
\*------------------------------------*/
/**
 * We can set individual grid gutter width with these.
 *
 * Apply them with the .grid class.
 */
.g-main, .g-reminders {
  margin-left: -2em;
}
.g-main > div[class^='gc-'], .g-reminders > div[class^='gc-'] {
  padding-left: 2em;
  margin-bottom: 2em;
}

/*------------------------------------*\
    $GROUP ALIGNMENT MODIFIERS
\*------------------------------------*/
/**
 * If we need all cells in a grid to align to the
 * same location use these classes.
 *
 * Apply them with the .grid class.
 */
/*------------------------------------*\
    $SINGLE ALIGNMENT MODIFIERS
\*------------------------------------*/
/**
 * If we need single cells in a grid to align to a
 * specific location use these classes.
 *
 * Apply them with the .grid__item class.
 */
/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * RESPONSIVE EXTENDS
 * FIXED WIDTH GRID CELLS
*/
/*------------------------------------*\
    $RESPONSIVE EXTENDS
\*------------------------------------*/
/**
 * These came from CSS Wizardry Grids - http://csswizardry.com/csswizardry-grids/
 *
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--full`), the second value is the media query
 * that the breakpoint fires at.
 */
/**
 * This list will make silent classes like %palm--full or %palm--grid-halves render
 * for you to extend. Your options are 'palm', 'lap', 'portable', 'desk', 'wide'.
 * If $use-silent-classes is set to false it will make regular classes instead of
 * silent classes.
 */
/**
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
/**
 * Create our width & gutter extends (or classes), prefixed by the specified namespace.
 */
/**
 * Generate our responsive extends (or classes)
 */
@media only screen and (max-width: 480px) {
  /**
   * Width Whole
   */
  .g-main > div[class^='gc-'], .g-reminders > div[class^='gc-'] {
    flex: 0 0 100% !important;
  }

  .gc-reminders, .gc-content, .gc-sidebar {
    width: 100%;
    flex: none !important;
  }

  /**
   * Width Half
   */
  /**
   * Width Third
   */
  /**
   * Width Quarter
   */
  /**
   * Width Fifth
   */
  /**
   * Gutter Small
   */
  /**
   * Gutter Medium
   */
  /**
   * Gutter Large
   */
  /**
   * Gutter xLarge
   */
}
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
   * Width Whole
   */
  /**
   * Width Half
   */
  /**
   * Width Third
   */
  /**
   * Width Quarter
   */
  /**
   * Width Fifth
   */
  /**
   * Gutter Small
   */
  /**
   * Gutter Medium
   */
  /**
   * Gutter Large
   */
  /**
   * Gutter xLarge
   */
}
@media only screen and (max-width: 1023px) {
  /**
   * Width Whole
   */
  /**
   * Width Half
   */
  /**
   * Width Third
   */
  /**
   * Width Quarter
   */
  /**
   * Width Fifth
   */
  /**
   * Gutter Small
   */
  /**
   * Gutter Medium
   */
  /**
   * Gutter Large
   */
  /**
   * Gutter xLarge
   */
}
@media only screen and (max-width: 1024px) {
  /**
   * Width Whole
   */
  /**
   * Width Half
   */
  /**
   * Width Third
   */
  /**
   * Width Quarter
   */
  /**
   * Width Fifth
   */
  /**
   * Gutter Small
   */
  /**
   * Gutter Medium
   */
  /**
   * Gutter Large
   */
  /**
   * Gutter xLarge
   */
}
@media only screen and (min-width: 1500px) {
  /**
   * Width Whole
   */
  /**
   * Width Half
   */
  /**
   * Width Third
   */
  /**
   * Width Quarter
   */
  /**
   * Width Fifth
   */
  /**
   * Gutter Small
   */
  /**
   * Gutter Medium
   */
  /**
   * Gutter Large
   */
  /**
   * Gutter xLarge
   */
}
/*------------------------------------*\ 
    $FIXED WITH GRID CELLS
\*------------------------------------*/
/**
 * Set the widths you need in your layout here.
 * These are px values.
 */
/**
 * Generate our fixed width extends (or classes)
 */
.gc-sidebar {
  width: 200px;
  flex: none !important;
}

/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * !IMPORTANT - It is best to only attach grid and/or width styles to your
 * grid classes. Don't clutter them with other styles. Instead add markup
 * inside these divs and then style those.
 *
 * grid blocks need to start with .g- and grid cells should start with .gc-
 *
 * @extend %grid__item is only needed with there isn't another extend
 * defining it's flex width.
 *
 * Note: If you don't give a grid cell a width it will just fill the
 * remaining space.
 */
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  .gc-sidebar {
    width: 100px;
  }
}

/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * IMPORTS
 * FORMS
 */
/*------------------------------------*\
    $IMPORTS
\*------------------------------------*/
/*------------------------------------*\
    GENERAL
\*------------------------------------*/
/**
 * FORM GRID
 * FORM FIELD COLS
 * FORM FIELD ITEMS
*/
/*------------------------------------*\
    $FORM GRID
\*------------------------------------*/
.form-thirds, .form-quarters {
  margin-left: -1em;
}
.form-thirds > li, .form-quarters > li {
  /*
      Todo - The margin-bottom value can become dynamic or a variable
      @author - lukelarsen
      @date - 3/13/14
      @time - 7:21 AM
   */
  margin-bottom: 15px;
  padding-left: 1em;
}

/*------------------------------------*\
    $FORM FIELD COLS
\*------------------------------------*/
.form-thirds > li {
  flex: 0 0 33.3333%;
}

.form-quarters > li {
  flex: 0 0 25%;
}

/*------------------------------------*\
    $FORM FIELD ITEMS
\*------------------------------------*/
.form-item-half {
  flex: 0 0 50% !important;
}

/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * RESPONSIVE EXTENDS
*/
/*------------------------------------*\
    $RESPONSIVE EXTENDS
\*------------------------------------*/
/**
 * Generate our responsive extends (or classes)
 */
@media only screen and (max-width: 480px) {
  /**
   * One Col
   */
  .form-quarters > li {
    flex: 0 0 100% !important;
  }

  /**
   * Two Cols
   */
  /**
   * Three Cols
   */
  /**
   * Four Cols
   */
  /**
   * Five Cols
   */
}
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
   * One Col
   */
  /**
   * Two Cols
   */
  /**
   * Three Cols
   */
  /**
   * Four Cols
   */
  /**
   * Five Cols
   */
}
@media only screen and (max-width: 1023px) {
  /**
   * One Col
   */
  /**
   * Two Cols
   */
  /**
   * Three Cols
   */
  /**
   * Four Cols
   */
  /**
   * Five Cols
   */
}
@media only screen and (max-width: 1024px) {
  /**
   * One Col
   */
  /**
   * Two Cols
   */
  /**
   * Three Cols
   */
  /**
   * Four Cols
   */
  /**
   * Five Cols
   */
}
@media only screen and (min-width: 1500px) {
  /**
   * One Col
   */
  /**
   * Two Cols
   */
  /**
   * Three Cols
   */
  /**
   * Four Cols
   */
  /**
   * Five Cols
   */
}
/*------------------------------------*\
    CONTENTS
\*------------------------------------*/
/**
 * GENERAL
 * CHECKBOXES & RADIOS
 * TEXTAREA
*/
/*------------------------------------*\
    $GENERAL
\*------------------------------------*/
[class^='form-'] > li > label,
[class^='form-'] > li > .label,
[class^='form-'] > li > input[type="text"],
[class^='form-'] > li > input[type="number"],
[class^='form-'] > li > input[type="date"],
[class^='form-'] > li > textarea,
[class^='form-'] > li > select {
  width: 100%;
  display: block;
}

/*------------------------------------*\
    $CHECKBOXES & RADIOS
\*------------------------------------*/
.check-list,
.check-list--inline {
  list-style: none;
  margin: 0;
  padding: 0;
}

.check-list--inline {
  /*
      Todo - Remove overflow and replace with .cf
      @author - lukelarsen
      @date - 3/13/14
      @time - 7:20 AM
   */
  overflow: hidden;
}
.check-list--inline li {
  float: left;
  margin-right: 10px;
  margin-bottom: 5px;
}

/*------------------------------------*\
    $TEXTAREA
\*------------------------------------*/
textarea {
  height: 100px;
}

/*------------------------------------*\ 
    $FORMS
\*------------------------------------*/
/* Add classes here to extend the different columns your
 * project will need. The classes need to start with .form-
 * For example .form-three-cols
 * Each class much extend %form-fields
 * You can then optionally include one of these:
 * %form--fit
 * %form--full
 * %form--halves
 * %form--thirds
 * %form--quarters
 * %form--fifths
 */
/*------------------------------------*\
    $TESTING
\*------------------------------------*/
.block {
  background-color: red;
}

.block--nested {
  background-color: purple;
}
